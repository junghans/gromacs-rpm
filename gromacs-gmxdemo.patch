diff -up gromacs-4.5.2/share/tutor/gmxdemo/demo.gmxdemo gromacs-4.5.2/share/tutor/gmxdemo/demo
--- gromacs-4.5.2/share/tutor/gmxdemo/demo.gmxdemo	2010-09-29 14:35:03.000000000 +0300
+++ gromacs-4.5.2/share/tutor/gmxdemo/demo	2010-11-01 14:04:34.833273502 +0200
@@ -58,10 +58,10 @@ cat << _EOF_
 -----------------------------------------------------------------
 Before we can start any simulation we need a molecular toplogy
 file. This topology file ( .top extension ) is generated by the
-program pdb2gmx. The only input file of the pdb2gmx program is the pdb
+program g_pdb2gmx. The only input file of the g_pdb2gmx program is the pdb
 file of our peptide ( .pdb extension ). 
 
-Because most pdb files do not contain all hydrogen atoms, the pdb2gmx
+Because most pdb files do not contain all hydrogen atoms, the g_pdb2gmx
 program will also add them to our peptide. The output file which
 contains the structure of the peptide when hydrogen atoms are added is a
 gromos structure file ( .gro extension )  
@@ -72,22 +72,22 @@ _EOF_
 
 if ( $?DISPLAY ) then
 	echo "You seem to have the DISPLAY variable is set, so we will"
-        echo "pop up a window with the output of the pdb2gmx program"  
+        echo "pop up a window with the output of the g_pdb2gmx program"  
 endif
 echo -n "Press <enter>"
 set  ans = $<
 
 
-echo "Starting pdb2gmx"
+echo "Starting g_pdb2gmx"
 if ( $?DISPLAY ) then 
-	xterm -title pdb2gmx -sb -e tail +0f output.pdb2gmx &
+	xterm -title g_pdb2gmx -sb -e tail +0f output.g_pdb2gmx &
 endif
-pdb2gmx -f ${MOL}.pdb -o ${MOL}.gro -p ${MOL}.top >& ! output.pdb2gmx << KOKO
+g_pdb2gmx -f ${MOL}.pdb -o ${MOL}.gro -p ${MOL}.top >& ! output.g_pdb2gmx << KOKO
 1
 1
 KOKO
 
-echo "pdb2gmx finished"
+echo "g_pdb2gmx finished"
 echo -n "Press <enter>"
 set  ans = $<
 
@@ -99,14 +99,14 @@ cat << _EOF_
 -----------------------------------------------------------------
 -----------------------------------------------------------------
 Because a simulation of a peptide in vacua is a bit unrealistic, we
-have to solvate our peptide in a box of water. genbox is the program
+have to solvate our peptide in a box of water. g_genbox is the program
 we use to do this.
 
-The genbox program reads the peptide structure file and an input file
-containing the sizes of the desired water box. The output of genbox is
+The g_genbox program reads the peptide structure file and an input file
+containing the sizes of the desired water box. The output of g_genbox is
 a gromos structure file of a peptide solvated in a box of water. The
-genbox program also changes the topology file ( .top extension ) to
-include water. First we will use the program editconf to define the
+g_genbox program also changes the topology file ( .top extension ) to
+include water. First we will use the program g_editconf to define the
 right boxsize for our system.
 
 -----------------------------------------------------------------
@@ -114,22 +114,22 @@ right boxsize for our system.
 _EOF_
 
 if ( $?DISPLAY ) then
-	echo "The output of the genbox program should appear"
+	echo "The output of the g_genbox program should appear"
         echo "in a separate xterm window"  
 endif
 
 echo -n "Press <enter>"
 set  ans = $<
 
-echo "Starting editconf and genbox..."
+echo "Starting g_editconf and g_genbox..."
 if ( $?DISPLAY ) then 
-	xterm -title genbox -sb -e tail +0f output.genbox &
+	xterm -title g_genbox -sb -e tail +0f output.g_genbox &
 endif
-editconf -f ${MOL}.gro -o ${MOL}.gro -d 0.5 >& ! output.genbox 
+g_editconf -f ${MOL}.gro -o ${MOL}.gro -d 0.5 >& ! output.g_genbox 
 
-genbox -cp ${MOL}.gro -cs -o ${MOL}_b4em.gro -p ${MOL}.top >>& ! output.genbox 
+g_genbox -cp ${MOL}.gro -cs -o ${MOL}_b4em.gro -p ${MOL}.top >>& ! output.g_genbox 
 
-echo "editconf and genbox finished"
+echo "g_editconf and g_genbox finished"
 echo -n "Press <enter>"
 set  ans = $<
 
@@ -142,7 +142,7 @@ cat << _EOF_
 -----------------------------------------------------------------
 In principle we can start a Molecular Dynamics simulation now. However
 it is not very wise to do so, because our system is full of close
-contacts. These close contacts are mainly a result of the genbox
+contacts. These close contacts are mainly a result of the g_genbox
 program. The added solvent might have some close contacts with the
 peptide resulting in very high repulsive energies. If we would start a
 Molecular Dynamics (MD) simulation without energy minimisation the
@@ -153,7 +153,7 @@ Energy Minimisation (EM). Energy minimis
 coordinates of our system to remove high energies from our system.  
 
 Before we can start the Energy Minimisation we have to preprocess all
-the input files with the GROMACS preprocessor named grompp. grompp
+the input files with the GROMACS preprocessor named g_g_grompp. g_g_grompp
 preprocesses the topology file (.top), the structure file (.gro) and a
 parameter file (.mdp) resulting in a binary topology file (.tpr
 extension). This binary topology file contains all information for a 
@@ -163,7 +163,7 @@ simulation (in this case an energy minim
 _EOF_
 
 if ( $?DISPLAY ) then
-	echo "The output of the grompp program should appear"  
+	echo "The output of the g_g_grompp program should appear"  
         echo "in a separate xterm window"
 endif
 
@@ -191,13 +191,13 @@ emtol               =  1000.0
 emstep              =  0.01
 _EOF_
 
-echo "Starting grompp..."
+echo "Starting g_grompp..."
 if ( $?DISPLAY ) then 
-	xterm -title grompp -sb -e tail +0f output.grompp_em &
+	xterm -title g_grompp -sb -e tail +0f output.g_grompp_em &
 endif
-grompp -f em -c ${MOL}_b4em -p ${MOL} -o ${MOL}_em >& ! output.grompp_em
+g_grompp -f em -c ${MOL}_b4em -p ${MOL} -o ${MOL}_em >& ! output.g_grompp_em
 
-echo "grompp finished"
+echo "g_grompp finished"
 echo -n "Press <enter>"
 set  ans = $<
 
@@ -210,8 +210,8 @@ cat << _EOF_
 -----------------------------------------------------------------
 Now the binary topology file is generated, we can start the energy
 minimisation (EM). The program which performs the EM is called
-mdrun. In fact all simulations are performed by the same program:
-mdrun. 
+g_mdrun. In fact all simulations are performed by the same program:
+g_mdrun. 
 
 As the Energy Minimisation is running, watch the output of the
 program. The first number ( from left to right ) is the number of the
@@ -224,21 +224,21 @@ rapidly drops down, and converges, to a 
 _EOF_
 
 if ( $?DISPLAY ) then
-	echo "The output of the mdrun program should appear"
+	echo "The output of the g_mdrun program should appear"
         echo "in a separate xterm window"
 endif
 
 echo -n "Press <enter>"
 set  ans = $<
 
-echo "starting energy minimisation mdrun..."
+echo "starting energy minimisation g_mdrun..."
 
 if ( $?DISPLAY ) then 
-	xterm -title mdrun -sb -e tail +0f output.mdrun_em &
+	xterm -title g_mdrun -sb -e tail +0f output.g_mdrun_em &
 endif
-mdrun -nice 4 -s ${MOL}_em -o ${MOL}_em -c ${MOL}_b4pr -v >& ! output.mdrun_em 
+g_mdrun -nice 4 -s ${MOL}_em -o ${MOL}_em -c ${MOL}_b4pr -v >& ! output.g_mdrun_em 
 
-echo "mdrun finished"
+echo "g_mdrun finished"
 echo -n "Press <enter>"
 set  ans = $<
 
@@ -255,7 +255,7 @@ fixed. This is called position restraine
 
 Position Restrained MD keeps the peptide fixed and lets all water
 molecules equilibrate around the peptide in order to fill holes
-etc. which were not filled by the genbox program.
+etc. which were not filled by the g_genbox program.
 
 We are first going to preprocess the input files to generate the
 binary topology. The input files are the topology file, the structure
@@ -274,7 +274,7 @@ performed ( like EM, PR-MD and MD etc. )
 _EOF_
 
 if ( $?DISPLAY ) then
-	echo "The output of the grompp program should appear"  
+	echo "The output of the g_g_grompp program should appear"  
         echo "in a separate xterm window"
 endif
 
@@ -318,12 +318,12 @@ gen_seed            =  173529
 _EOF_
 
 
-echo "Starting grompp..."
+echo "Starting g_grompp..."
 if ( $?DISPLAY ) then 
-	xterm -title grompp -sb -e tail +0f output.grompp_pr &
+	xterm -title g_grompp -sb -e tail +0f output.g_grompp_pr &
 endif
-grompp -f pr -c ${MOL}_b4pr -r ${MOL}_b4pr -p ${MOL} -o ${MOL}_pr >& ! output.grompp_pr
-echo "grompp finished"
+g_grompp -f pr -c ${MOL}_b4pr -r ${MOL}_b4pr -p ${MOL} -o ${MOL}_pr >& ! output.g_grompp_pr
+echo "g_grompp finished"
 
 echo -n "Press <enter>"
 set  ans = $<
@@ -346,19 +346,19 @@ _EOF_
 
 if ( $?DISPLAY ) then
 	echo "Because your DISPLAY variable is set, I will pop up a" 
-	echo "window with the output of the mdrun program"  
+	echo "window with the output of the g_mdrun program"  
 endif
 
 echo -n "Press <enter>"
 set  ans = $<
 
-echo "starting mdrun..."
+echo "starting g_mdrun..."
 if ( $?DISPLAY ) then 
-	xterm -title mdrun -sb -e tail +0f output.mdrun_pr &
+	xterm -title g_mdrun -sb -e tail +0f output.g_mdrun_pr &
 endif
-mdrun -nice 4 -s ${MOL}_pr -o ${MOL}_pr -c ${MOL}_b4md -v >& ! output.mdrun_pr
+g_mdrun -nice 4 -s ${MOL}_pr -o ${MOL}_pr -c ${MOL}_b4md -v >& ! output.g_mdrun_pr
 
-echo "mdrun finished"
+echo "g_mdrun finished"
 echo -n "Press <enter>"
 set  ans = $<
 
@@ -371,7 +371,7 @@ cat << _EOF_
 -----------------------------------------------------------------
 Now our complete system is finally ready for the actual Molecular
 Dynamics simulation. We start again by preprocessing the input files
-by the grompp program to generate the binary topology file (.tpb/.tpr
+by the g_g_grompp program to generate the binary topology file (.tpb/.tpr
 extension).
 
 -----------------------------------------------------------------
@@ -379,7 +379,7 @@ extension).
 _EOF_
 
 if ( $?DISPLAY ) then
-	echo "The output of the grompp program should appear"  
+	echo "The output of the g_g_grompp program should appear"  
         echo "in a separate xterm window"
 endif
 
@@ -419,13 +419,13 @@ gen_temp            =  300.0
 gen_seed            =  173529
 _EOF_
 
-echo "Starting grompp..."
+echo "Starting g_grompp..."
 if ( $?DISPLAY ) then 
-	xterm -title grompp -sb -e tail +0f output.grompp_md &
+	xterm -title g_grompp -sb -e tail +0f output.g_grompp_md &
 endif
-grompp -f md -c ${MOL}_b4md  -p ${MOL} -o ${MOL}_md >& ! output.grompp_md
+g_grompp -f md -c ${MOL}_b4md  -p ${MOL} -o ${MOL}_md >& ! output.g_grompp_md
 
-echo "grompp finished"
+echo "g_grompp finished"
 echo -n "Press <enter>"
 set  ans = $<
 
@@ -444,20 +444,20 @@ increasing ( the total number of steps i
 _EOF_
 
 if ( $?DISPLAY ) then
-	echo "The output of the mdrun program should appear"  
+	echo "The output of the g_mdrun program should appear"  
         echo "in a separate xterm window"
 endif
 
 echo -n "Press <enter>"
 set  ans = $<
 
-echo "starting mdrun..."
+echo "starting g_mdrun..."
 if ( $?DISPLAY ) then 
-	xterm -title mdrun -sb -e tail +0f output.mdrun_md &
+	xterm -title g_mdrun -sb -e tail +0f output.g_mdrun_md &
 endif
-mdrun -nice 4 -s ${MOL}_md -o ${MOL}_md -c ${MOL}_after_md -v >& ! output.mdrun_md
+g_mdrun -nice 4 -s ${MOL}_md -o ${MOL}_md -c ${MOL}_after_md -v >& ! output.g_mdrun_md
 
-echo "mdrun finished"
+echo "g_mdrun finished"
 echo -n "Press <enter>"
 set  ans = $<
 
@@ -472,10 +472,10 @@ We are finished simulating, and we are g
 trajectory. The trajectory file ( .trj extension ) contains all
 coordinates, velocities and forces of all the atoms in our system. 
 
-The next program we are going run is ngmx. ngmx is a very simple
+The next program we are going run is g_ngmx. g_ngmx is a very simple
 trajectory viewer. 
 
-Once the ngmx program has been started you need to click on a few
+Once the g_ngmx program has been started you need to click on a few
 buttons to view your trajectory.
 
 1. Once the program has been started a dialog box shows up. Click on
@@ -497,7 +497,7 @@ _EOF_
 
 if ( $?DISPLAY ) then
 	echo Starting Trajectory viewer...
-	ngmx -f ${MOL}_md -s ${MOL}_md  &
+	g_ngmx -f ${MOL}_md -s ${MOL}_md  &
 endif
 #last line 
 
